name: Release

on:
  push:
    branches: [main]

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  release:
    name: Version and Publish
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          registry-url: "https://registry.npmjs.org"

      - run: npm ci
      - run: npm run build

      - name: Create changesets for modified packages
        run: |
          # Check if there are existing changesets
          CHANGESET_COUNT=$(ls -1 .changeset/*.md 2>/dev/null | grep -v "README.md" | wc -l || echo "0")

          if [ "$CHANGESET_COUNT" -gt "0" ]; then
            echo "✅ Found $CHANGESET_COUNT existing changeset(s), skipping auto-generation"
            exit 0
          fi

          echo "No changesets found, checking for package changes..."

          # Get changed packages from the current commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || git show --name-only --pretty=format: HEAD)
          PACKAGES=$(echo "$CHANGED_FILES" | grep "^packages/" | cut -d'/' -f2 | sort -u | tr '\n' ' ')

          if [[ -z "$PACKAGES" ]]; then
            echo "No package changes detected"
            exit 0
          fi

          echo "Changed packages: $PACKAGES"

          # Determine version bump from commit message
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ $COMMIT_MSG =~ ^feat.*!:|BREAKING ]]; then
            BUMP="major"
          elif [[ $COMMIT_MSG =~ ^feat ]]; then
            BUMP="minor"
          else
            BUMP="patch"
          fi

          echo "Version bump: $BUMP"

          # Create changeset
          CHANGESET_ID="auto-$(date +%s)"
          CHANGESET_FILE=".changeset/${CHANGESET_ID}.md"

          cat > "$CHANGESET_FILE" << EOF
          ---
          $(for pkg in $PACKAGES; do
            case "$pkg" in
              playwright-framework)
                echo "\"@netanelh2/playwright-framework\": $BUMP"
                ;;
              create-playwright-project)
                echo "\"@netanelh2/create-playwright-project\": $BUMP"
                ;;
              create-workflows-package)
                echo "\"@netanelh2/create-workflows-package\": $BUMP"
                ;;
            esac
          done)
          ---

          $(echo "$COMMIT_MSG" | head -n1)
          EOF

          echo "✅ Created changeset: $CHANGESET_FILE"
          cat "$CHANGESET_FILE"

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: npm run release
          version: npm run version-packages
          commit: "chore: version packages"
          title: "chore: release packages"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub releases
        if: steps.changesets.outputs.published == 'true'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const publishedPackages = ${{ steps.changesets.outputs.publishedPackages }};

            for (const pkg of publishedPackages) {
              const tagName = `${pkg.name}@${pkg.version}`;
              
              try {
                await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tagName,
                  name: `${pkg.name} v${pkg.version}`,
                  body: `## What's Changed\n\nSee the full changelog at https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/packages/${pkg.name.split('/')[1]}/CHANGELOG.md`,
                  draft: false,
                  prerelease: false
                });
                console.log(`✅ Created release: ${tagName}`);
              } catch (error) {
                if (error.status === 422) {
                  console.log(`⚠️ Release ${tagName} already exists`);
                } else {
                  console.error(`❌ Failed to create release for ${tagName}: ${error.message}`);
                }
              }
            }
