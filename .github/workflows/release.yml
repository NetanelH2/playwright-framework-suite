name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  release:
    name: Version and Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          registry-url: "https://registry.npmjs.org"

      - name: Install Dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Check for existing changesets
        id: check-changesets
        run: |
          CHANGESET_COUNT=$(find .changeset -name "*.md" ! -name "README.md" | wc -l)
          echo "count=$CHANGESET_COUNT" >> $GITHUB_OUTPUT
          echo "Found $CHANGESET_COUNT changeset(s)"

          # Check if this is a version bump commit from changesets
          if [[ "${{ github.event.head_commit.message }}" == "chore: version packages" ]]; then
            echo "is_version_commit=true" >> $GITHUB_OUTPUT
            echo "This is a version commit - will publish packages"
          else
            echo "is_version_commit=false" >> $GITHUB_OUTPUT
          fi

      - name: Create automatic changeset if none exists
        if: steps.check-changesets.outputs.count == '0' && steps.check-changesets.outputs.is_version_commit == 'false'
        run: |
          CHANGED_PACKAGES=$(git diff HEAD~1 --name-only | grep '^packages/' | cut -d'/' -f2 | sort -u)

          if [ ! -z "$CHANGED_PACKAGES" ]; then
            COMMIT_MSG=$(git log -1 --pretty=%B)
            TIMESTAMP=$(date +%s)
            
            # Determine version bump from commit message
            if [[ $COMMIT_MSG =~ ^feat.*!:|BREAKING ]]; then
              BUMP="major"
            elif [[ $COMMIT_MSG =~ ^feat ]]; then
              BUMP="minor"
            else
              BUMP="patch"
            fi
            
            cat > .changeset/auto-${TIMESTAMP}.md << EOF
          ---
          $(echo "$CHANGED_PACKAGES" | while read pkg; do
            case "$pkg" in
              playwright-framework)
                echo "\"@netanelh2/playwright-framework\": $BUMP"
                ;;
              create-playwright-project)
                echo "\"@netanelh2/create-playwright-project\": $BUMP"
                ;;
              create-workflows-package)
                echo "\"@netanelh2/create-workflows-package\": $BUMP"
                ;;
            esac
          done)
          ---

          $(echo "$COMMIT_MSG" | head -n1)
          EOF
            
            echo "✅ Created automatic changeset for: $CHANGED_PACKAGES"
            cat .changeset/auto-${TIMESTAMP}.md
          else
            echo "No package changes detected, skipping changeset creation"
          fi

      - name: Create Release Pull Request or Publish
        id: changesets
        if: steps.check-changesets.outputs.count != '0' || steps.check-changesets.outputs.is_version_commit == 'true'
        uses: changesets/action@v1
        with:
          version: npm run version-packages
          publish: npm run release
          commit: "chore: version packages"
          title: "chore: version packages"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub releases
        if: steps.changesets.outputs.published == 'true'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const publishedPackages = JSON.parse('${{ steps.changesets.outputs.publishedPackages }}');

            for (const pkg of publishedPackages) {
              const tagName = `${pkg.name}@${pkg.version}`;
              
              // Extract package directory name from scoped package name
              const pkgDir = pkg.name.replace('@netanelh2/', '');
              
              try {
                await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tagName,
                  name: `${pkg.name} v${pkg.version}`,
                  body: `## What's Changed\n\nSee the full changelog at https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/packages/${pkgDir}/CHANGELOG.md`,
                  draft: false,
                  prerelease: false
                });
                console.log(`✅ Created release: ${tagName}`);
              } catch (error) {
                if (error.status === 422) {
                  console.log(`⚠️ Release ${tagName} already exists`);
                } else {
                  console.error(`❌ Failed to create release for ${tagName}: ${error.message}`);
                }
              }
            }
