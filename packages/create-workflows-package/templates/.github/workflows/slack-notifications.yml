name: Slack Notifications

on:
  # Triggered when deploy-reports workflow completes
  workflow_run:
    workflows: ['Deploy Playwright HTML Report to GitHub Pages']
    types:
      - completed

  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      status:
        description: 'Test notification status'
        required: true
        default: 'success'
        type: choice
        options:
          - success
          - failure

permissions:
  actions: read # Required to query workflow runs via GitHub API
  contents: read # Required to checkout repository

jobs:
  analyze-status:
    name: Analyze Test and Deployment Status
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 10
    outputs:
      deployment_status: ${{ steps.status.outputs.deployment_status }}
      trigger: ${{ steps.status.outputs.trigger }}
      test_status: ${{ steps.status.outputs.test_status }}
      workflow_name: ${{ steps.status.outputs.workflow_name }}
      artifact_issue: ${{ steps.status.outputs.artifact_issue }}
      israel_time: ${{ steps.status.outputs.israel_time }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install jq for JSON parsing
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Get test and deployment status
        id: status
        run: |
          # Default values for manual trigger
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "deployment_status=${{ github.event.inputs.status }}" >> $GITHUB_OUTPUT
            echo "trigger=manual" >> $GITHUB_OUTPUT
            echo "test_status=skipped" >> $GITHUB_OUTPUT
            echo "workflow_name=Manual Test" >> $GITHUB_OUTPUT
            echo "artifact_issue=false" >> $GITHUB_OUTPUT
          else
            # Get deployment status from deploy-reports workflow
            echo "deployment_status=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
            echo "trigger=auto" >> $GITHUB_OUTPUT

            # For workflow_run events, we can access the triggering workflow information
            # The deploy-reports workflow is triggered by completed test workflows

            # Get the actual test workflow conclusion from the deployment workflow context
            # The deploy-reports workflow is triggered by test workflows and we need to find the original test status

            # The Slack workflow is triggered by Deploy workflow completion
            # The Deploy workflow is triggered by test workflow completion
            # We need to find which test workflow originally triggered the deployment

            # Get the Deploy workflow information
            DEPLOY_WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
            DEPLOY_HEAD_SHA="${{ github.event.workflow_run.head_sha }}"
            DEPLOY_RUN_ID="${{ github.event.workflow_run.id }}"



            # Query the Deploy workflow run to find which test workflow triggered it
            REPO="${{ github.repository }}"
            TOKEN="${{ secrets.REPO_WORKFLOW_TOKEN }}"


            DEPLOY_DETAILS=$(curl -s -H "Authorization: token $TOKEN" \
              "https://api.github.com/repos/$REPO/actions/runs/$DEPLOY_RUN_ID")

            # Check if API response is valid
            if [ "$DEPLOY_DETAILS" = "null" ] || [ -z "$DEPLOY_DETAILS" ]; then

              TRIGGERING_WORKFLOW_NAME="unknown"
            else
              TRIGGERING_WORKFLOW_NAME=$(echo "$DEPLOY_DETAILS" | jq -r '.triggering_actor.login // "unknown"' 2>/dev/null || echo "unknown")
            fi

            # Find the most recent test workflow run for this commit
            WORKFLOWS_RESPONSE=$(curl -s -H "Authorization: token $TOKEN" \
              "https://api.github.com/repos/$REPO/actions/runs?per_page=100")

            API_STATUS=$(echo "$WORKFLOWS_RESPONSE" | jq -r '.message // "success"' 2>/dev/null || echo "parse_error")

            RECENT_RUNS=""

            # Strategy 1: Exact commit SHA match with timestamp sorting
            if [ "$WORKFLOWS_RESPONSE" != "null" ] && [ ! -z "$WORKFLOWS_RESPONSE" ] && [ "$API_STATUS" = "success" ]; then
              WORKFLOW_RUNS_CHECK=$(echo "$WORKFLOWS_RESPONSE" | jq -r '.workflow_runs // empty' 2>/dev/null)
              if [ ! -z "$WORKFLOW_RUNS_CHECK" ] && [ "$WORKFLOW_RUNS_CHECK" != "null" ]; then
                RECENT_RUNS=$(echo "$WORKFLOWS_RESPONSE" | jq -r --arg sha "$DEPLOY_HEAD_SHA" \
                  '.workflow_runs[]? | select(.head_sha == $sha and (.name == "Sanity Tests" or .name == "Regression Tests")) | "\(.created_at)|\(.name)|\(.conclusion)"' 2>/dev/null | \
                  sort -r)

              fi
            fi

            # Strategy 2: If no exact match, find most recent test workflows within time window
            if [ -z "$RECENT_RUNS" ] && [ "$WORKFLOWS_RESPONSE" != "null" ] && [ ! -z "$WORKFLOWS_RESPONSE" ]; then
              DEPLOY_TIMESTAMP="${{ github.event.workflow_run.created_at }}"

              # Get timestamp 1 hour before deploy
              SEARCH_CUTOFF=$(date -d "$DEPLOY_TIMESTAMP - 1 hour" -Iseconds 2>/dev/null || date -u -d "$DEPLOY_TIMESTAMP - 1 hour" +"%Y-%m-%dT%H:%M:%SZ" 2>/dev/null || echo "")

              if [ ! -z "$SEARCH_CUTOFF" ]; then
                RECENT_RUNS=$(echo "$WORKFLOWS_RESPONSE" | jq -r --arg cutoff "$SEARCH_CUTOFF" \
                  '.workflow_runs[]? | select((.name == "Sanity Tests" or .name == "Regression Tests") and .created_at >= $cutoff) | "\(.created_at)|\(.name)|\(.conclusion)" ' 2>/dev/null | \
                  sort -r | head -2 || echo "")

              fi
            fi

            # Strategy 3: Get the most recent test workflows (fallback)
            if [ -z "$RECENT_RUNS" ] && [ "$WORKFLOWS_RESPONSE" != "null" ] && [ ! -z "$WORKFLOWS_RESPONSE" ]; then

              RECENT_RUNS=$(echo "$WORKFLOWS_RESPONSE" | jq -r \
                '.workflow_runs[]? | select(.name == "Sanity Tests" or .name == "Regression Tests") | "\(.created_at)|\(.name)|\(.conclusion)"' 2>/dev/null | \
                sort -r | head -2 || echo "")

            fi



            # Extract statuses with timestamps to determine which ran most recently
            SANITY_INFO=$(echo "$RECENT_RUNS" | grep "|Sanity Tests|" | head -1)
            REGRESSION_INFO=$(echo "$RECENT_RUNS" | grep "|Regression Tests|" | head -1)

            SANITY_STATUS=$(echo "$SANITY_INFO" | cut -d'|' -f3)
            REGRESSION_STATUS=$(echo "$REGRESSION_INFO" | cut -d'|' -f3)

            # Set defaults if not found
            SANITY_STATUS=${SANITY_STATUS:-"not_found"}
            REGRESSION_STATUS=${REGRESSION_STATUS:-"not_found"}



            # Determine the actual test status and workflow name based on which workflow actually triggered this deployment
            # First, try to get more detailed info including timestamps to determine the most recent
            if [ "$WORKFLOWS_RESPONSE" != "null" ] && [ ! -z "$WORKFLOWS_RESPONSE" ]; then
              # Get the most recent test workflow for this commit with timestamp
              MOST_RECENT_TEST=$(echo "$WORKFLOWS_RESPONSE" | jq -r --arg sha "$DEPLOY_HEAD_SHA" \
                '.workflow_runs[]? | select(.head_sha == $sha and (.name == "Sanity Tests" or .name == "Regression Tests")) | "\(.created_at)|\(.name)|\(.conclusion)"' 2>/dev/null | \
                sort -r | head -1)

              if [ ! -z "$MOST_RECENT_TEST" ] && [ "$MOST_RECENT_TEST" != "null" ]; then
                MOST_RECENT_WORKFLOW=$(echo "$MOST_RECENT_TEST" | cut -d'|' -f2)
                MOST_RECENT_STATUS=$(echo "$MOST_RECENT_TEST" | cut -d'|' -f3)
                MOST_RECENT_TIME=$(echo "$MOST_RECENT_TEST" | cut -d'|' -f1)

                TEST_STATUS="$MOST_RECENT_STATUS"
                WORKFLOW_NAME="$MOST_RECENT_WORKFLOW"

              elif [ "$SANITY_STATUS" != "not_found" ] && [ "$SANITY_STATUS" != "null" ]; then
                TEST_STATUS="$SANITY_STATUS"
                WORKFLOW_NAME="Sanity Tests"

              elif [ "$REGRESSION_STATUS" != "not_found" ] && [ "$REGRESSION_STATUS" != "null" ]; then
                TEST_STATUS="$REGRESSION_STATUS"
                WORKFLOW_NAME="Regression Tests"
              fi

            else
              # Enhanced fallback: Try multiple approaches to find recent test workflows

              # Strategy A: Direct query for recent test workflows
              RECENT_WORKFLOWS_RESPONSE=$(curl -s -H "Authorization: token $TOKEN" \
                "https://api.github.com/repos/$REPO/actions/runs?per_page=20")

              RECENT_TEST=""

              # Check if API response is valid
              if [ "$RECENT_WORKFLOWS_RESPONSE" != "null" ] && [ ! -z "$RECENT_WORKFLOWS_RESPONSE" ]; then
                # Strategy A1: Look for workflows in the last 2 hours
                DEPLOY_TIMESTAMP="${{ github.event.workflow_run.created_at }}"
                SEARCH_CUTOFF=$(date -d "$DEPLOY_TIMESTAMP - 2 hours" -Iseconds 2>/dev/null || date -u -d "$DEPLOY_TIMESTAMP - 2 hours" +"%Y-%m-%dT%H:%M:%SZ" 2>/dev/null || echo "")

                if [ ! -z "$SEARCH_CUTOFF" ]; then

                  RECENT_TEST=$(echo "$RECENT_WORKFLOWS_RESPONSE" | jq -r --arg cutoff "$SEARCH_CUTOFF" \
                    '.workflow_runs[]? | select((.name == "Sanity Tests" or .name == "Regression Tests") and .created_at >= $cutoff and .conclusion != null) | "\(.created_at)|\(.name)|\(.conclusion)" ' 2>/dev/null | \
                    sort -r | head -1 || echo "")
                fi

                # Strategy A2: If time-based search fails, get the most recent completed test workflow
                if [ -z "$RECENT_TEST" ] || [ "$RECENT_TEST" = "null" ]; then

                  RECENT_TEST=$(echo "$RECENT_WORKFLOWS_RESPONSE" | jq -r \
                    '.workflow_runs[]? | select((.name == "Sanity Tests" or .name == "Regression Tests") and .conclusion != null) | "\(.created_at)|\(.name)|\(.conclusion)" ' 2>/dev/null | \
                    sort -r | head -1 || echo "")
                fi

                # Strategy A3: If still nothing, get any recent test workflow regardless of completion
                if [ -z "$RECENT_TEST" ] || [ "$RECENT_TEST" = "null" ]; then

                  RECENT_TEST=$(echo "$RECENT_WORKFLOWS_RESPONSE" | jq -r \
                    '.workflow_runs[]? | select(.name == "Sanity Tests" or .name == "Regression Tests") | "\(.created_at)|\(.name)|\(.conclusion // "in_progress")" ' 2>/dev/null | \
                    sort -r | head -1 || echo "")
                fi
              fi

              if [ ! -z "$RECENT_TEST" ] && [ "$RECENT_TEST" != "null" ]; then
                # Parse the most recent test with timestamp info if available
                if echo "$RECENT_TEST" | grep -q "|"; then
                  # Format: "timestamp|name|status" or "name|status"
                  if [ "$(echo "$RECENT_TEST" | grep -o '|' | wc -l)" -eq 2 ]; then
                    # Has timestamp
                    TEST_STATUS=$(echo "$RECENT_TEST" | cut -d'|' -f3)
                    WORKFLOW_NAME=$(echo "$RECENT_TEST" | cut -d'|' -f2)
                    RECENT_TIME=$(echo "$RECENT_TEST" | cut -d'|' -f1)

                  else
                    # No timestamp, format: "name|status"
                    TEST_STATUS=$(echo "$RECENT_TEST" | cut -d'|' -f2)
                    WORKFLOW_NAME=$(echo "$RECENT_TEST" | cut -d'|' -f1)

                  fi
                else
                  # Old format: "name:status"
                  TEST_STATUS=$(echo "$RECENT_TEST" | cut -d: -f2)
                  WORKFLOW_NAME=$(echo "$RECENT_TEST" | cut -d: -f1)

                fi
              else
                # Last resort: Check deployment status to infer test status

                if [ "${{ github.event.workflow_run.conclusion }}" == "failure" ]; then
                  TEST_STATUS="failure"
                  WORKFLOW_NAME="Inferred Test"

                else
                  # Check if we can find ANY workflow for this commit (not just test workflows)
                  ANY_WORKFLOW=$(echo "$WORKFLOWS_RESPONSE" | jq -r --arg sha "$DEPLOY_HEAD_SHA" \
                    '.workflow_runs[]? | select(.head_sha == $sha) | .name' 2>/dev/null | head -1 || echo "")

                  if [ ! -z "$ANY_WORKFLOW" ] && [ "$ANY_WORKFLOW" != "null" ]; then
                    TEST_STATUS="unknown"
                    WORKFLOW_NAME="Found Commit Workflows"

                  else
                    TEST_STATUS="unknown"
                    WORKFLOW_NAME="No Matching Workflows"

                  fi
                fi
              fi
            fi

            # Check if this is an artifact/deployment issue
            ARTIFACT_ISSUE="false"
            if [ "$TEST_STATUS" == "success" ] && [ "${{ github.event.workflow_run.conclusion }}" == "failure" ]; then
              ARTIFACT_ISSUE="true"

            fi

            # Additional context from the deploy workflow event
            DEPLOY_CREATED_AT="${{ github.event.workflow_run.created_at }}"


            echo "test_status=${TEST_STATUS}" >> $GITHUB_OUTPUT
            echo "workflow_name=${WORKFLOW_NAME}" >> $GITHUB_OUTPUT
            echo "artifact_issue=${ARTIFACT_ISSUE}" >> $GITHUB_OUTPUT


          fi

          # Get current date/time in Israel timezone
          ISRAEL_TIME=$(TZ='Asia/Jerusalem' date '+%d-%m-%Y %H:%M:%S')
          echo "israel_time=$ISRAEL_TIME" >> $GITHUB_OUTPUT

  notify-success:
    name: Notify Slack on Test Success
    runs-on: ubuntu-latest
    needs: analyze-status
    if: needs.analyze-status.outputs.test_status == 'success'
    timeout-minutes: 5
    steps:
      - name: Notify Slack on Test Success
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "channel": "#testing-updates",
              "text": "✅ Test Workflow Completed Successfully!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "✅ Test Workflow Completed Successfully!"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🧪 Test Workflow Status\n\n*Workflow:* ${{ needs.analyze-status.outputs.workflow_name }}\n*Status:* ✅ PASSED\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "📊 Deployment Status\n\n*Status:* ${{ needs.analyze-status.outputs.deployment_status == 'success' && '✅ DEPLOYED SUCCESSFULLY' || '❌ DEPLOYMENT FAILED' }}\n*Report URL:* https://itcb-2.github.io/ITCB-Testing/"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ needs.analyze-status.outputs.deployment_status == 'success' && '🎉 Great work! All tests passed and reports are now live!' || '✅ Tests passed but there were deployment issues. Reports may be delayed.' }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-failure:
    name: Notify Slack on Test Failure
    runs-on: ubuntu-latest
    needs: analyze-status
    if: needs.analyze-status.outputs.test_status == 'failure'
    timeout-minutes: 5
    steps:
      - name: Notify Slack on Test Failure
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "channel": "#testing-updates",
              "text": "❌ Tests Failed!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "❌ Tests Failed!"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🧪 Test Workflow Status\n\n*Workflow:* ${{ needs.analyze-status.outputs.workflow_name }}\n*Status:* ❌ FAILED\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "📊 Report Deployment Status\n\n*Status:* ${{ needs.analyze-status.outputs.deployment_status == 'success' && '✅ REPORTS DEPLOYED (Failed Test Results)' || '❌ DEPLOYMENT ALSO FAILED' }}\n*Report URL:* https://itcb-2.github.io/ITCB-Testing/\n*Deployed at:* ${{ needs.analyze-status.outputs.israel_time }} (IDT)"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "⚠️ **Action Required:** Some tests failed. Check the detailed test report above to see which tests need attention."
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "📋 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-unknown:
    name: Notify Slack on Unknown Test Status
    runs-on: ubuntu-latest
    needs: analyze-status
    if: needs.analyze-status.outputs.test_status == 'unknown'
    timeout-minutes: 5
    steps:
      - name: Notify Slack on Unknown Test Status
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "channel": "#testing-updates",
              "text": "🤷 Test Status Unknown - Deployment Completed",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🤷 Test Status Unknown"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "⚠️ **Unable to determine test results**\n\nNo test workflows (Sanity or Regression) were found for this deployment.\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "📊 Deployment Status\n\n*Status:* ${{ steps.status.outputs.deployment_status == 'success' && '✅ DEPLOYED SUCCESSFULLY' || '❌ DEPLOYMENT FAILED' }}\n*Report URL:* https://itcb-2.github.io/ITCB-Testing/\n*Deployed at:* ${{ steps.status.outputs.israel_time }} (IDT)"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  summary:
    name: Add Notification Summary
    runs-on: ubuntu-latest
    needs: [analyze-status, notify-success, notify-failure, notify-unknown]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Add notification status to summary
        run: |
          echo "📱 Slack Notification Sent!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Deployment Status: ${{ needs.analyze-status.outputs.deployment_status }}" >> $GITHUB_STEP_SUMMARY
          echo "🧪 Test Status: ${{ needs.analyze-status.outputs.test_status }}" >> $GITHUB_STEP_SUMMARY
          echo "🔄 Workflow: ${{ needs.analyze-status.outputs.workflow_name }}" >> $GITHUB_STEP_SUMMARY
          echo "🔔 Trigger: ${{ needs.analyze-status.outputs.trigger }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.analyze-status.outputs.artifact_issue }}" == "true" ]; then
            echo "📦 Artifact Issue: GitHub storage quota exceeded" >> $GITHUB_STEP_SUMMARY
            echo "⏳ Note: Storage quota typically refreshes within 6-12 hours" >> $GITHUB_STEP_SUMMARY
          fi
          echo "⏰ Sent at: ${{ needs.analyze-status.outputs.israel_time }} (IDT)" >> $GITHUB_STEP_SUMMARY
